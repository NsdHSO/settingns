#!/bin/sh

# Function to map shorthand commit types to full forms
map_commit_type() {
  case "$1" in
    r) echo "refactor" ;;
    R) echo "Refactor" ;;
    f) echo "feat" ;;
    fi) echo "fix" ;;
    Fi) echo "Fix" ;;
    d) echo "docs" ;;
    D) echo "Docs" ;;
    s) echo "style" ;;
    S) echo "Style" ;;
    t) echo "test" ;;
    T) echo "Test" ;;
    c) echo "chore" ;;
    C) echo "Chore" ;;
    p) echo "perf" ;;
    P) echo "Perf" ;;
    *) echo "$1" ;;
  esac
}
# Function to map commit types to emojis
map_emoji() {
  case "$1" in
    feat) echo "🎸" ;;
    fix) echo "🛠️" ;;
    docs) echo "📝" ;;
    style) echo "🎨" ;;
    refactor) echo "👷" ;;
    test) echo "🐳" ;;
    chore) echo "🌻" ;;
    perf) echo "🚀" ;;
    revert) echo "⏪" ;;
    *) echo "" ;;
  esac
}

COMMIT_MSG_FILE="$1"
COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")

# Extract the first line of the commit message
FIRST_LINE=$(echo "$COMMIT_MSG" | head -n1)

# Extract the commit type and the rest of the message
COMMIT_TYPE=$(echo "$FIRST_LINE" | cut -d ':' -f1)
REST_OF_MESSAGE=$(echo "$FIRST_LINE" | cut -d ':' -f2-)

# Map shorthand commit type to full form
FULL_COMMIT_TYPE=$(map_commit_type "$COMMIT_TYPE")

# Map full commit type to emoji
EMOJI=$(map_emoji "$FULL_COMMIT_TYPE")

# Reconstruct the first line
if [ -n "$EMOJI" ]; then
  NEW_FIRST_LINE="$FULL_COMMIT_TYPE: $EMOJI$REST_OF_MESSAGE"
else
  NEW_FIRST_LINE="$FULL_COMMIT_TYPE:$REST_OF_MESSAGE"
fi

# Combine the new first line with the rest of the commit message
NEW_COMMIT_MSG=$(echo "$COMMIT_MSG" | sed "1s/.*/$NEW_FIRST_LINE/")

# Overwrite the commit message file
echo "$NEW_COMMIT_MSG" > "$COMMIT_MSG_FILE"
