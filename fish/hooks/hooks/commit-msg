#!/bin/bash
# This is a diagnostic script to help troubleshoot the git hook issues

echo "=== Git Hook Diagnostic Script ===" 
echo "Running as user: $(whoami)"
echo "Current directory: $(pwd)"

# Check if we're in a git repository
if [ -d .git ]; then
    echo "✅ Git repository found"
else
    echo "❌ Not in a git repository root"
    exit 1
fi

# Check if the hooks directory exists
if [ -d .git/hooks ]; then
    echo "✅ Git hooks directory exists"
else
    echo "❌ Git hooks directory not found"
    exit 1
fi

# Check if the commit-msg hook exists
if [ -f .git/hooks/commit-msg ]; then
    echo "✅ commit-msg hook file exists"
    
    # Check if it's executable
    if [ -x .git/hooks/commit-msg ]; then
        echo "✅ commit-msg hook is executable"
    else
        echo "❌ commit-msg hook is NOT executable"
        echo "   Fixing permissions..."
        chmod +x .git/hooks/commit-msg
        echo "   Permissions fixed ✅"
    fi
    
    # Check the content of the hook
    echo "commit-msg hook content (first 5 lines):"
    head -n 5 .git/hooks/commit-msg
else
    echo "❌ commit-msg hook file not found"
fi

# Create a simple test hook to verify it works
echo "Creating a test hook to verify git hooks are working..."
cat > .git/hooks/commit-msg.test << 'EOF'
#!/bin/sh
echo "Test hook executed at $(date)" > /tmp/test-hook-executed
# Add "TEST" to the beginning of the commit message
COMMIT_MSG_FILE=$1
CONTENT=$(cat "$COMMIT_MSG_FILE")
echo "TEST: $CONTENT" > "$COMMIT_MSG_FILE"
EOF

chmod +x .git/hooks/commit-msg.test

echo "To test if hooks are working:"
echo "1. Temporarily rename your hook: mv .git/hooks/commit-msg .git/hooks/commit-msg.bak"
echo "2. Use the test hook: mv .git/hooks/commit-msg.test .git/hooks/commit-msg"
echo "3. Make a test commit: gc R \"test hook\""
echo "4. Check if the hook ran: cat /tmp/test-hook-executed"
echo "5. Restore your original hook: mv .git/hooks/commit-msg.bak .git/hooks/commit-msg"
echo ""
echo "If the test hook works but your original hook doesn't, there's an issue with your hook script."

# Create a fixed version of the hook with simpler logic
echo "Creating a simplified hook for testing..."

cat > .git/hooks/commit-msg.simple << 'EOF'
#!/bin/sh

# Simple logging
LOG_FILE="/tmp/simple-hook.log"
echo "Hook executed at $(date)" > "$LOG_FILE"

# Get the commit message file
COMMIT_MSG_FILE=$1
COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")
echo "Original message: $COMMIT_MSG" >> "$LOG_FILE"

# Extract first line
FIRST_LINE=$(echo "$COMMIT_MSG" | head -n 1)

# Check if it starts with "Refactor:"
if echo "$FIRST_LINE" | grep -q "^Refactor:"; then
    # Simple replacement - add emoji and "with tests"
    NEW_LINE=$(echo "$FIRST_LINE" | sed 's/^Refactor:/Refactor: 👷/')
    NEW_LINE="$NEW_LINE with tests"
    
    # Replace the first line
    REMAINING_LINES=$(echo "$COMMIT_MSG" | tail -n +2)
    if [ -n "$REMAINING_LINES" ]; then
        printf "%s\n%s\n" "$NEW_LINE" "$REMAINING_LINES" > "$COMMIT_MSG_FILE"
    else
        echo "$NEW_LINE" > "$COMMIT_MSG_FILE"
    fi
    
    echo "Updated message: $(cat $COMMIT_MSG_FILE)" >> "$LOG_FILE"
fi
EOF

chmod +x .git/hooks/commit-msg.simple

echo "To test the simplified hook:"
echo "1. Temporarily rename your hook: mv .git/hooks/commit-msg .git/hooks/commit-msg.bak"
echo "2. Use the simple hook: mv .git/hooks/commit-msg.simple .git/hooks/commit-msg"
echo "3. Make a test commit: gc R \"test simplified hook\""
echo "4. Check the log: cat /tmp/simple-hook.log"
echo "5. Restore your original hook: mv .git/hooks/commit-msg.bak .git/hooks/commit-msg"

echo "=== End of Diagnostic Script ==="